{"ast":null,"code":"import _defineProperty from \"/Users/kmcalear/workspace/dumbo-web-062419/36-component-lifecycle/chat-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/kmcalear/workspace/dumbo-web-062419/36-component-lifecycle/chat-app/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      channels: [],\n      currentChannel: {\n        messages: []\n      },\n      currentUser: {}\n    };\n\n    this.handleNewChannel = channelName => {\n      const newChannel = {\n        name: \"#\".concat(channelName),\n        messages: []\n      };\n      fetch('http://localhost:3000/channels', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(newChannel)\n      }).then(res => res.json()).then(newChannelFromServer => {\n        this.setState({\n          channels: [...this.state.channels, newChannelFromServer]\n        });\n      });\n    };\n\n    this.handleChangeChannel = channelName => {\n      const selectedChannel = this.state.channels.find(channelObj => channelObj.name === channelName);\n      this.setState({\n        currentChannel: selectedChannel\n      });\n    };\n\n    this.handleNewMessage = messageText => {\n      const newMessage = {\n        user: this.state.currentUser,\n        content: {\n          text: messageText\n        }\n      };\n\n      const updatedChannel = _objectSpread({}, this.state.currentChannel, {\n        messages: [...this.state.currentChannel.messages, newMessage]\n      });\n\n      fetch(\"http://localhost:3000/channels/\".concat(updatedChannel.id), {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(updatedChannel)\n      });\n      const updatedChannels = this.state.channels.map(channel => {\n        if (channel.name === updatedChannel.name) {\n          return updatedChannel;\n        } else {\n          return channel;\n        }\n      });\n      this.setState({\n        currentChannel: updatedChannel,\n        channels: updatedChannels\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3000/current_user').then(res => res.json()).then(currentUser => this.setState({\n      currentUser: currentUser\n    }));\n    fetch('http://localhost:3000/channels').then(res => res.json()).then(channels => this.setState({\n      channels: channels,\n      currentChannel: channels[0]\n    }));\n  }\n\n  render() {\n    const channelNames = this.state.channels.map(channelObj => channelObj.name);\n\n    if (!this.state.currentUser.id) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Yo, you need a current user, silly!\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      onNewChannel: this.handleNewChannel,\n      onChangeChannel: this.handleChangeChannel,\n      channelNames: channelNames,\n      user: this.state.currentUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Chat, {\n      onNewMessage: this.handleNewMessage,\n      channel: this.state.currentChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kmcalear/workspace/dumbo-web-062419/36-component-lifecycle/chat-app/src/App.js"],"names":["React","Sidebar","Chat","App","Component","state","channels","currentChannel","messages","currentUser","handleNewChannel","channelName","newChannel","name","fetch","method","headers","body","JSON","stringify","then","res","json","newChannelFromServer","setState","handleChangeChannel","selectedChannel","find","channelObj","handleNewMessage","messageText","newMessage","user","content","text","updatedChannel","id","updatedChannels","map","channel","componentDidMount","render","channelNames"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css'\nimport Sidebar from './Sidebar'\nimport Chat from './Chat'\n\nclass App extends React.Component {\n  state = {\n    channels: [],\n    currentChannel: {\n      messages: []\n    },\n    currentUser: {}\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3000/current_user')\n      .then(res => res.json())\n      .then(currentUser => this.setState({ currentUser: currentUser }))\n\n    fetch('http://localhost:3000/channels')\n      .then(res => res.json())\n      .then(channels => this.setState({ channels: channels, currentChannel: channels[0] }))\n  }\n\n  handleNewChannel = (channelName) => {\n    const newChannel = {\n      name: `#${channelName}`,\n      messages: []\n    }\n\n    fetch('http://localhost:3000/channels', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(newChannel)\n    })\n      .then(res => res.json())\n      .then(newChannelFromServer => {\n        this.setState({channels: [...this.state.channels, newChannelFromServer]})\n      })\n\n\n  }\n\n  handleChangeChannel = (channelName) => {\n    const selectedChannel = this.state.channels.find(channelObj => channelObj.name === channelName)\n    this.setState({ currentChannel: selectedChannel })\n  }\n\n  handleNewMessage = (messageText) => {\n    const newMessage = {\n      user: this.state.currentUser,\n      content: {\n        text: messageText\n      }\n    }\n\n    const updatedChannel = {\n      ...this.state.currentChannel,\n      messages: [...this.state.currentChannel.messages, newMessage]\n    }\n\n    fetch(`http://localhost:3000/channels/${updatedChannel.id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(updatedChannel)\n    })\n\n    const updatedChannels = this.state.channels.map(channel => {\n      if (channel.name === updatedChannel.name) {\n        return updatedChannel\n      } else {\n        return channel\n      }\n    })\n\n    this.setState({ currentChannel: updatedChannel, channels: updatedChannels })\n\n  }\n\n  render() {\n    const channelNames = this.state.channels.map(channelObj => channelObj.name)\n    if (!this.state.currentUser.id) {\n      return <div>\n      <h1>Yo, you need a current user, silly!</h1>\n        <form>\n          <input type=\"text\" />\n        </form>\n      </div>\n    }\n    return (\n      <div className=\"container\">\n        <Sidebar\n          onNewChannel={this.handleNewChannel}\n          onChangeChannel={this.handleChangeChannel}\n          channelNames={channelNames}\n          user={this.state.currentUser} />\n        <Chat\n          onNewMessage={this.handleNewMessage}\n          channel={this.state.currentChannel} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}