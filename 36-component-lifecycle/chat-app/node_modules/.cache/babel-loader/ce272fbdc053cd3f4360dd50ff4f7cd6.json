{"ast":null,"code":"import _defineProperty from \"/Users/kmcalear/workspace/dumbo-web-062419/36-component-lifecycle/chat-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/kmcalear/workspace/dumbo-web-062419/36-component-lifecycle/chat-app/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\nimport data from './data';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      channels: data.channels,\n      currentChannel: data.channels[3]\n    };\n\n    this.handleNewChannel = channelName => {\n      const newChannel = {\n        name: \"#\".concat(channelName),\n        messages: []\n      };\n      this.setState({\n        channels: [...this.state.channels, newChannel]\n      });\n    };\n\n    this.handleChangeChannel = channelName => {\n      const selectedChannel = this.state.channels.find(channelObj => channelObj.name === channelName);\n      this.setState({\n        currentChannel: selectedChannel\n      });\n    };\n\n    this.handleNewMessage = messageText => {\n      const newMessage = {\n        user: data.current_user,\n        content: {\n          text: messageText\n        }\n      };\n\n      const updatedChannel = _objectSpread({}, this.state.currentChannel, {\n        messages: [...this.state.currentChannel.messages, newMessage]\n      });\n\n      const updatedChannels = this.state.channels.map(channel => {\n        if (channel.name === updatedChannel.name) {\n          return updatedChannel;\n        } else {\n          return channel;\n        }\n      });\n      this.setState({\n        currentChannel: updatedChannel,\n        channels: updatedChannels\n      });\n    };\n\n    console.log('Im the constructor and Im being created!!');\n  }\n\n  componentDidMount() {\n    console.log('Im the in the componentDidMount function and Im (the app component) now on the DOM and ready to be used!!');\n  }\n\n  render() {\n    console.log('Im the render function and Im figuring out what to build & put on the DOM!!');\n    const channelNames = this.state.channels.map(channelObj => channelObj.name);\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      onNewChannel: this.handleNewChannel,\n      onChangeChannel: this.handleChangeChannel,\n      channelNames: channelNames,\n      user: data.current_user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(Chat, {\n      onNewMessage: this.handleNewMessage,\n      channel: this.state.currentChannel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kmcalear/workspace/dumbo-web-062419/36-component-lifecycle/chat-app/src/App.js"],"names":["React","Sidebar","Chat","data","App","Component","constructor","state","channels","currentChannel","handleNewChannel","channelName","newChannel","name","messages","setState","handleChangeChannel","selectedChannel","find","channelObj","handleNewMessage","messageText","newMessage","user","current_user","content","text","updatedChannel","updatedChannels","map","channel","console","log","componentDidMount","render","channelNames"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css'\nimport Sidebar from './Sidebar'\nimport Chat from './Chat'\nimport data from './data'\n\nclass App extends React.Component {\n  state = {\n    channels: data.channels,\n    currentChannel: data.channels[3]\n  }\n\n  constructor() {\n    super()\n    console.log('Im the constructor and Im being created!!')\n  }\n\n  componentDidMount() {\n    console.log('Im the in the componentDidMount function and Im (the app component) now on the DOM and ready to be used!!')\n  }\n\n  handleNewChannel = (channelName) => {\n    const newChannel = {\n      name: `#${channelName}`,\n      messages: []\n    }\n    this.setState({channels: [...this.state.channels, newChannel]})\n  }\n\n  handleChangeChannel = (channelName) => {\n    const selectedChannel = this.state.channels.find(channelObj => channelObj.name === channelName)\n    this.setState({ currentChannel: selectedChannel })\n  }\n\n  handleNewMessage = (messageText) => {\n    const newMessage = {\n      user: data.current_user,\n      content: {\n        text: messageText\n      }\n    }\n\n    const updatedChannel = {\n      ...this.state.currentChannel,\n      messages: [...this.state.currentChannel.messages, newMessage]\n    }\n\n    const updatedChannels = this.state.channels.map(channel => {\n      if (channel.name === updatedChannel.name) {\n        return updatedChannel\n      } else {\n        return channel\n      }\n    })\n\n    this.setState({ currentChannel: updatedChannel, channels: updatedChannels })\n\n  }\n\n  render() {\n    console.log('Im the render function and Im figuring out what to build & put on the DOM!!')\n\n    const channelNames = this.state.channels.map(channelObj => channelObj.name)\n    return (\n      <div className=\"container\">\n        <Sidebar\n          onNewChannel={this.handleNewChannel}\n          onChangeChannel={this.handleChangeChannel}\n          channelNames={channelNames}\n          user={data.current_user} />\n        <Chat\n          onNewMessage={this.handleNewMessage}\n          channel={this.state.currentChannel} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}